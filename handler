function service(service: string)
	return cloneref(game:GetService(service))
end

local Player = service("Players")
local OWNER  = Player.LocalPlayer

local Workspace = service("Workspace")
local ReplicatedStorage = service("ReplicatedStorage")
local TweenService = service("TweenService")
local Debris = service("Debris")
local MainEvent = ReplicatedStorage:WaitForChild("MainEvent")
local Handler = {}
local Connections = {}

function Handler:KO(v: Model)
    if v.Character:FindFirstChild('BodyEffects') then
        if v.Character.BodyEffects:FindFirstChild('K.O') then
            return v.Character.BodyEffects['K.O']
        end
    end
end

function Handler:Dead(v: Model)
    if v.Character:FindFirstChild('BodyEffects') then
        if v.Character.BodyEffects:FindFirstChild('SDeath') then
            return v.Character.BodyEffects['SDeath']
        end
    end
end

function Handler:Humanoid(v: Model)
    if v.Character:FindFirstChildOfClass("Humanoid") then
       return v.Character.Humanoid
    end
end

function Handler:UpperTorso(v: Model)
    if v.Character:FindFirstChild("UpperTorso") then
       return v.Character.UpperTorso
    end
end

function Handler:HumanoidRootPart(v: Model)
    if not v.Character:FindFirstChild(v.Name) then
        if v.Character:FindFirstChild('HumanoidRootPart') then
            return v.Character.HumanoidRootPart
        else
            return v.Character.UpperTorso
        end
    else
        if not v.Character:FindFirstChild('HumanoidRootPart') then
            return v.Character:FindFirstChild(v.Name).HumanoidRootPart
        else
            return v.Character.HumanoidRootPart
        end
    end
end

function Handler:Disconnect(Name: string, Force: boolean)
    if Connections[Name] then
        Connections[Name]:Disconnect()
        if Force then
            Connections[Name] = nil
        end
    end
end

function Handler:AddConnection(Name: string, Connection: RBXScriptConnection?)
    Connections[Name] = Connection
end

function Handler:RemoveConnection(Name: string)
    Handler:Disconnect(Connections[Name],true)
end

function Handler:Pairs(Table: { [string]: any }, Callback: any)
    for index, value in pairs(Table) do
        Callback(value)
    end
end

function Handler:Create(type: string, Properties: { [string]: any }): Instance
    local NewInstance = Instance.new(type)
    for i, v in pairs(Properties) do
        NewInstance[i] = v
    end
    return NewInstance
end

function Handler:PlaySound(ID: number, Vol: number)
    local sound = Handler:Create("Sound",{SoundId = "rbxassetid://"..ID,Volume = Vol,Parent = Workspace})
    sound:Play()
    sound.Ended:Connect(function()
        sound:Destroy()
    end)
    return sound
end

function Handler:StopSound(Sound: any)
    if Sound and Sound.IsPlaying then
        Sound:Stop()
        Sound:Destroy()
    end
end

function Handler:CanCollide(Character: Model, Value: boolean)
    Handler:Pairs(Character:GetDescendants(), function(v)
        if v:IsA("Part") or v:IsA("BasePart") then 
            v.CanCollide = Value 
        end 
    end)
end

function Handler:ZeroVelocity(Character: Model)
    Handler:Pairs(Character:GetDescendants(), function(v)
        if v:IsA("BasePart") or v:IsA("MeshPart") or v:IsA("Part") then
            v.Velocity = Vector3.zero
            v.AssemblyLinearVelocity = Vector3.zero
            v.AssemblyAngularVelocity = Vector3.zero
        end
    end)
end

function Handler:Destroy(Path: Instance, Name: string): void
    if Path:FindFirstChild(Name) then
        Path:FindFirstChild(Name):Destroy()
    end
end

function Handler:CoreBypass()
    Handler:Destroy(workspace,"Core")
    local Core = Instance.new("Part")
    Core.Name = "Core"
    Core.Size = Vector3.new(0.05, 0.05, 0.05)
    Core.CanCollide = false
    Core.Transparency = 1
    Core.Parent = workspace
    local Weld = Instance.new("Weld", Core)
    Weld.Part0 = Core
    Weld.Part1 = OWNER.Character.HumanoidRootPart
    Weld.C0 = CFrame.new(0, 0, 0)
    return Core
end

function Handler:TypeParticle(ID: number)
    local Object = game:GetObjects("rbxassetid://"..ID)
    return Object
end

function Handler:SpawnParticle(ID: number, Name: string, Parent: Instance, Y: number)
    local Object = game:GetObjects("rbxassetid://"..ID)
    local RetrievedObject = Object[1]
    local Attachment = Instance.new("Attachment", Parent)
    Attachment.Name = Name
    Attachment.Position = Vector3.new(0, Y, 0)
    Handler:Pairs(RetrievedObject:GetChildren(), function(v)
        v.Parent = Attachment  
    end)
end

function Handler:DestroyParticle(Parent: any, Name: string)
    if Parent:FindFirstChild(Name) then
        Parent:FindFirstChild(Name):Destroy()
    end
end

function Handler:AddDebris(Name: any, Duration: number)
    Debris:AddItem(Name, Duration)
end

function Handler:Stop(Character: Model)
    Handler:Pairs(Handler:Humanoid(Character):GetPlayingAnimationTracks(), function(v)
        v:Stop()
    end)
end

function Handler:AnimStop(Character: Model, ID: number, Speed: number)
    Handler:Pairs(Handler:Humanoid(Character):GetPlayingAnimationTracks(), function(v)
        if v.Animation.AnimationId:match("rbxassetid://"..ID) then
            if tonumber(Speed) then
                v:Stop(Speed)
            else
                v:Stop()
            end
        end
    end)
end

function Handler:IsAnimPlaying(Character: Model, ID: number)
    Handler:Pairs(Handler:Humanoid(Character):GetPlayingAnimationTracks(), function(v)
        if v.Animation.AnimationId:match("rbxassetid://"..ID) then
            return true
        end
    end)
    return false
end

function Handler:AnimPlay(Character: Model, ID: number, Speed: number, Time: number, Smoothing: number)
	Handler:Stop(Character)
	local animation = Instance.new('Animation', Workspace)
	animation.AnimationId = "rbxassetid://"..ID
	playing = Handler:Humanoid(Character):LoadAnimation(animation)
	playing.Priority = Enum.AnimationPriority.Action4
	if tonumber(Speed) then
		playing:AdjustSpeed(Speed)
	else
		playing:AdjustSpeed(1)
	end
	if tonumber(Time) then
		playing.TimePosition = Time
	end
	if tonumber(Smoothing) then
		playing:Play(Smoothing) 
	else
		playing:Play()
	end
	animation:Destroy()
end

function Handler:Tween(Part: Instance, Duration: number, Properties: { [string]: any }): void
    TweenService:Create(Part, TweenInfo.new(Duration), Properties):Play()
end

function Handler:Chat(Message: any)
    ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents").SayMessageRequest:FireServer(Message, "All")
end

function Handler:Print(Message: any)
	print(Message)
end

function Handler:Warn(Message: any)
	warn(Message)
end

return Handler
